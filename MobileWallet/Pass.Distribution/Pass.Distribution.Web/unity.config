<?xml version="1.0" encoding="utf-8"?>
<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
  <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration" />
  <assembly name="Common.Web" />
  <assembly name="Pass.Manager.Web" />
  <assembly name="Pass.Manager.Core" />
  <assembly name="Pass.Manager.BL" />
  <assembly name="FileStorage.Core" />
  <assembly name="FileStorage.BL" />
  <assembly name="FileStorage.Repository.EF" />
  <assembly name="CertificateStorage.BL" />
  <assembly name="Pass.Manager.Repository.EF" />
  <assembly name="Pass.Container.BL" />
  <assembly name="Pass.Container.Repository.EF" />
  <assembly name="CertificateStorage.Repository.EF" />
  <assembly name="CertificateStorage.Repository.Core" />
  <assembly name="Common.Repository" />
  <assembly name="FileStorage.Repository.Core" />
  <assembly name="CertificateStorage.Core" />
  <assembly name="Pass.Container.Core" />
  <assembly name="Pass.Container.Repository.Core" />
  <assembly name="Common.BL" />
  <assembly name="Pass.Distribution.Core" />
  <assembly name="Pass.Distribution.BL" />
  <assembly name="FileStorage.BL" />

  <container name="FileStorage">
    <extension type="Interception" />
    <register type="FileStorage.Core.IFileStorageConfig" mapTo="FileStorage.BL.FileStorageConfig">
      <lifetime type="singleton" />
    </register>
    <register type="Common.Repository.IDbConfig" mapTo="FileStorage.BL.FileStorageConfig">
      <lifetime type="singleton" />
    </register>
    <register type="FileStorage.Repository.Core.IFileStorageUnitOfWork" mapTo="FileStorage.Repository.EF.FileStorageUnitOfWork" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <register type="FileStorage.Core.IFileStorageService" mapTo="FileStorage.BL.FileStorageService" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
  </container>

  <container name="CertificateStorage">
    <extension type="Interception" />
    <register type="CertificateStorage.Core.ICertificateStorageConfig" mapTo="CertificateStorage.BL.CertificateStorageConfig">
      <lifetime type="singleton" />
    </register>
    <register type="Common.Repository.IDbConfig" mapTo="CertificateStorage.BL.CertificateStorageConfig">
      <lifetime type="singleton" />
    </register>

    <register type="CertificateStorage.Repository.Core.ICertificateStorageUnitOfWork" mapTo="CertificateStorage.Repository.EF.CertificateStorageUnitOfWork" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <register type="CertificateStorage.Core.ICertificateStorageService" mapTo="CertificateStorage.BL.CertificateStorageService" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
  </container>

  <container name="PassManager">
    <extension type="Interception" />
    <register type="Pass.Manager.Core.IPassManagerConfig" mapTo="Pass.Manager.BL.PassManagerConfig">
      <lifetime type="singleton" />
    </register>
    <register type="Common.Repository.IDbConfig" mapTo="Pass.Manager.BL.PassManagerConfig">
      <lifetime type="singleton" />
    </register>

    <register type="Pass.Manager.Core.IPassManagerUnitOfWork" mapTo="Pass.Manager.Repository.EF.PassManagerUnitOfWork" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <register type="Pass.Manager.Core.Services.IPassContentService" mapTo="Pass.Manager.BL.Services.PassContentService" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <register type="Pass.Manager.Core.Services.IPassContentFieldService" mapTo="Pass.Manager.BL.Services.PassContentFieldService" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <register type="Pass.Manager.Core.Services.IPassOnlineService" mapTo="Pass.Manager.BL.Services.PassOnlineService" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
  </container>

  <container name="PassContainer">
    <extension type="Interception" />
    <register type="Pass.Container.Core.IPassContainerConfig" mapTo="Pass.Container.BL.PassContainerConfig">
      <lifetime type="singleton" />
    </register>
    <register type="Pass.Container.Core.IPassTemplateConfig" mapTo="Pass.Container.BL.PassContainerConfig">
      <lifetime type="singleton" />
    </register>
    <register type="Common.Repository.IDbConfig" mapTo="Pass.Container.BL.PassContainerConfig">
      <lifetime type="singleton" />
    </register>

    <register type="Pass.Container.Repository.Core.IPassContainerUnitOfWork" mapTo="Pass.Container.Repository.EF.PassContainerUnitOfWork" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>

    <register type="Pass.Container.Core.IPassTemplateService" mapTo="Pass.Container.BL.PassTemplateService" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <register type="Pass.Container.Core.IPassService" mapTo="Pass.Container.BL.PassService" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <register type="Pass.Container.Core.IPassProcessingAppleService" mapTo="Pass.Container.BL.PassProcessing.PassProcessingAppleService" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <register type="Pass.Container.Core.IPassCertificateService" mapTo="Pass.Container.BL.PassCertificateService" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <register type="Pass.Container.Core.IPassTemplateStorageService" mapTo="Pass.Container.BL.PassTemplateStorageService" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <register type="Common.BL.ISequenceGenerator[]" mapTo="Pass.Container.BL.SequenceGenerator">
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <register type="Pass.Container.Core.ISerialNumberGenerator" mapTo="Pass.Container.BL.SerialNumberGenerator">
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
  </container>

  <container name="PassDistribution">
    <extension type="Interception" />
    <register type="Pass.Distribution.Core.IPassDistributionConfig" mapTo="Pass.Distribution.BL.PassDistributionConfig">
      <lifetime type="singleton" />
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <register type="Pass.Distribution.Core.Services.IPassDistributionService" mapTo="Pass.Distribution.BL.Services.PassDistributionService" >
      <interceptor type="TransparentProxyInterceptor" />
      <policyInjection />
    </register>
    <interception>
      <policy name="PassManagerBLServicesTypes">
        <matchingRule name="BusinessLayerMatch" type="NamespaceMatchingRule">
          <constructor>
            <param name="namespaceName" value="Pass.Manager.BL.Services" />
          </constructor>
        </matchingRule>
        <callHandler name="LogHandler" type="Common.Logging.LoggingCallHandler, Common.Logging" />
      </policy>
      <policy name="FileStorageBLServicesTypes">
        <matchingRule name="BusinessLayerMatch" type="NamespaceMatchingRule">
          <constructor>
            <param name="namespaceName" value="FileStorage.BL" />
          </constructor>
        </matchingRule>
        <callHandler name="LogHandler" type="Common.Logging.LoggingCallHandler, Common.Logging" />
      </policy>
      <policy name="CertificateStorageBLServicesTypes">
        <matchingRule name="BusinessLayerMatch" type="NamespaceMatchingRule">
          <constructor>
            <param name="namespaceName" value="CertificateStorage.BL" />
          </constructor>
        </matchingRule>
        <callHandler name="LogHandler" type="Common.Logging.LoggingCallHandler, Common.Logging" />
      </policy>
      <policy name="PassContainerBLServicesTypes">
        <matchingRule name="BusinessLayerMatch" type="NamespaceMatchingRule">
          <constructor>
            <param name="namespaceName" value="Pass.Container.BL" />
          </constructor>
        </matchingRule>
        <callHandler name="LogHandler" type="Common.Logging.LoggingCallHandler, Common.Logging" />
      </policy>
      <policy name="PassDistributionBLServicesTypes">
        <matchingRule name="BusinessLayerMatch" type="NamespaceMatchingRule">
          <constructor>
            <param name="namespaceName" value="Pass.Distribution.BL" />
          </constructor>
        </matchingRule>
        <callHandler name="LogHandler" type="Common.Logging.LoggingCallHandler, Common.Logging" />
      </policy>
      <policy name="PassDistributionBLServicesTypes">
        <matchingRule name="BusinessLayerMatch" type="NamespaceMatchingRule">
          <constructor>
            <param name="namespaceName" value="Common.Web" />
          </constructor>
        </matchingRule>
        <callHandler name="LogHandler" type="Common.Logging.LoggingCallHandler, Common.Logging" />
      </policy>
      <policy name="PassDistributionBLServicesTypes">
        <matchingRule name="BusinessLayerMatch" type="NamespaceMatchingRule">
          <constructor>
            <param name="namespaceName" value="Common.BL" />
          </constructor>
        </matchingRule>
        <callHandler name="LogHandler" type="Common.Logging.LoggingCallHandler, Common.Logging" />
      </policy>
    </interception>
  </container>
</unity>